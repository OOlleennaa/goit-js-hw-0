{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAU,CACdC,SAAU,gBACVC,SAAU,OACVC,aAAc,OACdC,QAAS,IACTC,cAAc,EACdC,kBAAmB,cAkCrB,SAASC,EAAcN,EAAUO,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAET,WAAUO,UAEpBG,EAAO,CAAEV,WAAUO,S,GAEpBA,E,IAzCMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAGF,IAFJ,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBb,MAAOiB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAERC,EAAI,EAAGA,EAAID,EAAOE,MAAOD,IAAK,CACvC,IAAIE,EAAWF,EAAI,EACbG,EAASC,OAAOP,EAAMI,OAASH,EAAKG,MAAQD,EAElDpB,EAAcsB,EAAUC,GACrBE,MAAK,SAAAC,G,IAAGhC,EAAQgC,EAARhC,SAAUO,EAAKyB,EAALzB,MACjB0B,EAAApC,GAASqC,OAAOC,QACd,uBAAwCC,OAAfpC,EAAS,QAAYoC,OAAN7B,EAAM,MAC5CR,E,IAGLsC,OAAM,SAAAL,G,IAAGhC,EAAQgC,EAARhC,SAAUO,EAAKyB,EAALzB,MAClB0B,EAAApC,GAASqC,OAAOI,QACd,sBAAqCF,OAAfpC,EAAS,QAAYoC,OAAN7B,EAAM,MAC3CR,E,IAMVmB,EAAMG,cAAckB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst options = {\n  position: 'center-bottom',\n  distance: '15px',\n  borderRadius: '15px',\n  timeout: 10000,\n  clickToClose: true,\n  cssAnimationStyle: 'from-right',\n};\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n\n      for (let i = 0; i < amount.value; i++) {\n      let position = i + 1;\n      const delays = Number(delay.value) + step.value * i;\n\n      createPromise(position, delays)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`,\n            options\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`,\n            options\n          );\n        });\n    }\n  \n\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$options","position","distance","borderRadius","timeout","clickToClose","cssAnimationStyle","$ce04d3a99e08e73b$var$createPromise","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","i","value","position1","delays","Number","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.d1c0f74b.js.map"}